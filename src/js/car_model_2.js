
World.airFriction = air friction (global)

//object to represent the car
var Car = {

	Car.airFrictionFactor = modifier for World.airFrictionFactor based on car shape
	Car.rollingFriction = vehicle rolling resistance

	Car.mass = mass of the vehicle

	Car.engine = {
	
		outputForce = force (at wheels) generated by the drive train
		throttlePosition = modifier for Car.engine.outputForce based on throttlePosition
		health = modifier for Car.engine.outputForce based on engine health

	}

	Car.isPlayer = used to sync the car to the viewPort (if needed)
	Car.speed = scalar speed of the vehicle (Vtangent)
	Car.movementDirection = unit vector representing direction car is actually moving
	Car.positionDirection = unit vector representing the direction the front of the car is pointing
	
	Car.wheels[0] = {
		staticFriction = static friction coefficient (when there is no slip)
		slidingFriction = sliding friction coefficient (when there is slip)
		
		isDriveWheel = 0/1 is this wheel driven by the engine
		isSteeringWheel = 0/1 is the angle of this wheel driven by the steering input
		
		angle = angle between the direction the car is facing and the direction the wheel is facing
		
		driveForce = actual force in direction of car motion exerted by this tire
		turnForce = actual force, perpendicular to car motion exerted by this tire
		
		forwardOffset = distance along length of car from CG to center of this wheel
		lateralOffset = distance across width of car from CG to center of this wheel
	}

	Car.update = function(World) {

		//update wheel angle based on user input
		//update wheel forces based on angle of motion/angle of wheel/engineForce/etc.
		//sum all forces to move the car
		//sum all moments to turn the car
		//update the car position
		//update the car angle
		//redraw the car
		//snap viewPort to car location/angle if isPlayer == 1

	}

}

